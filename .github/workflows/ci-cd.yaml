name: ci-cd
on:
  push:
    branches: main
  pull_request:
    branches: main
jobs:
  test:
    name: test ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ['3.7', '3.8', '3.9', '3.10']
    runs-on: ${{ matrix.os }}-latest
    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: install poetry
      run: pipx install "poetry>=1.2.0"
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'
    - run: poetry install --with test
    - run: poetry run pytest -vv
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install poetry
        run: pipx install "poetry>=1.2.0"
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install --with lint
      - name: Pylint
        run: >
          poetry run pylint --rcfile=.pylintrc $(git ls-files '*.py')
          --ignore-paths=tests
      - name: MyPy
        run: >
          poetry run mypy $(git ls-files '*.py')
          --ignore-paths=tests
  publish:
      needs: [test, lint]
      if: github.event_name == 'push'
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v3
      - name: install poetry
        run: pipx install "poetry>=1.2.0"
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'
      - run: poetry install
      - name: publish to test pypi
        env:
          TEST_PYPYI_TOKEN: ${{ secrets.pypi_token }}
        run: >
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry publish -r test-pypi -u __token__ -p $TEST_PYPYI_TOKEN
