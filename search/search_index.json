{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A command line app for taking beautiful notes. qlm gives you access to beautiful notes on any machine. The name comes from the Arabic word for pen: \u0642\u0644\u0645 which makes use of the three letter root q-l-m to cut, snip, prune, clip or truncate. So try to keep those notes concise! Basic Usage pip install qlm qlm connect 'username/repo' qlm config --local-repo 'folder_with_notes' echo '# My notes' > 'folder_with_notes/my_note.md' qlm add my_note.md qlm show my_note.md","title":"Home"},{"location":"#_1","text":"which makes use of the three letter root q-l-m to cut, snip, prune, clip or truncate. So try to keep those notes concise!","title":"\u0642\u0644\u0645"},{"location":"#basic-usage","text":"pip install qlm qlm connect 'username/repo' qlm config --local-repo 'folder_with_notes' echo '# My notes' > 'folder_with_notes/my_note.md' qlm add my_note.md qlm show my_note.md","title":"Basic Usage"},{"location":"commands/","text":"Commands qlm --help or qlm Usage : $ [OPTIONS] COMMAND [ARGS]... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : add : Add file(s) to your github remote config : Display and edit your current configuration connect : Checks if you can connect to github create : Creates and connects to a new private repository download : Downloads your notes from a remote edit : Edit a file get : Download a file from your remote ls : Lists markdown files in your remote. offline : Switch to working in offline mode publish : Publishes files that were saved while offline rm : Removes a file show : Prints your file to the console add Add file(s) to your github remote from your local repo. Accepts wildcards with glob syntax like '*.md'. If you're offline, qlm records this in your configuration. You can see which files qlm has stored by running qlm config. You can add them all to github later by running qlm publish . You can empty this list of files by running qlm config --empty-offline . Or you can use git yourself to send files to your remote! Usage : $ add [OPTIONS] FILES Arguments : FILES : The path to the file you want to add. Accepts wildcard syntax, i.e. myfolder/*.md [required] Options : -f, --force : Don't prompt before adding files [default: False] --help : Show this message and exit. config Display and edit your current configuration Usage : $ config [OPTIONS] Options : -e, --editor TEXT : The command to open the text editor you want to use, i.e. nano or vim -eo, --empty-offline : Empty the list of offline files to add with qlm publish. If you want more granular control of these files, it's probably best to empty them and then manually add them to them github using git on the command line [default: False] -lr, --local-repo TEXT : The absolute path to the local directory you want to keep your files in. -rr, --remote-repo TEXT : The full name of the remote repo you want to use, i.e. username/repo -hk, --hide-key TEXT : Don't print out a specific key in the configuration output -o, --offline TEXT : Set offline to True or False. Defaults to True. [default: True] --help : Show this message and exit. connect Checks if you can connect to github and sets your config to online. You must set the environment variable $qlm_token to connect. You must specify the full name of the repo in the format username/repo. If you don't, qlm will attempt to find the repo under your personal account username. Usage : $ connect [OPTIONS] REMOTE Arguments : REMOTE : The name of the remote github repository where your notes are, e.g. my-username/repo-name [required] Options : --help : Show this message and exit. create Creates and connects to a new repository in github under your personal account. The repository is private by default because privacy matters Usage : $ create [OPTIONS] REPO_NAME Arguments : REPO_NAME : The name of the new repo to create [required] Options : -p, --public : Make a public, not private repository [default: False] -f, --force : Don't prompt before creating a new repo [default: False] --help : Show this message and exit. download Downloads your notes from a remote to a local repository. Online only command To switch into online mode, run qlm connect. Usage : $ download [OPTIONS] LOCAL Arguments : LOCAL : The absolute path to where you want to keep your notes [required] Options : -r, --remote TEXT : The name of the remote you want to download files from. Defaults to whatever is in your config. --help : Show this message and exit. edit Edit a file Uses vim by default. You can change the text editor using qlm config --editor. Usage : $ edit [OPTIONS] FILE Arguments : FILE : The path to the file you want to edit relative to remote or local repo root. [required] Options : --help : Show this message and exit. get Download a file from your remote Usage : $ get [OPTIONS] FILE Arguments : FILE : Path to the remote file you want to download [required] Options : -r, --rename TEXT : Rename the file you want to download -d, --directory TEXT : The local directory to save the file to. If not specified, qlm will download the file to your current working directory. --help : Show this message and exit. ls Lists markdown files in your remote. Online only To switch into online mode, run qlm connect. Usage : $ ls [OPTIONS] [DIRECTORY] Arguments : [DIRECTORY] : The directory you want to list the contents of. Defaults to the repo root if omitted. Options : -nm, --non-markdown : Also list files that aren't markdown [default: False] --help : Show this message and exit. offline Switch to working in offline mode with a local directory If you want to add your work to a remote later, use qlm publish. Usage : $ offline [OPTIONS] LOCAL Arguments : LOCAL : The absolute path to the local directory where you want to keep your notes [required] Options : --help : Show this message and exit. publish Publishes files that were saved in offline mode using qlm add Usage : $ publish [OPTIONS] Options : -f, --force : Publish files without prompting for confirmation [default: False] --help : Show this message and exit. rm Removes a file Usage : $ rm [OPTIONS] FILE Arguments : FILE : The file you want to remove [required] Options : -f, --force : Remove the file without prompting for confirmation [default: False] --help : Show this message and exit. show Prints your file to the console. Looks much nicer if you use markdown Usage : $ show [OPTIONS] FILE Arguments : FILE : The path to the file you want see. [required] Options : -nm, --no-markup : Print a file out without rendering markdown. [default: False] --help : Show this message and exit.","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#qlm-help-or-qlm","text":"Usage : $ [OPTIONS] COMMAND [ARGS]... Options : --install-completion : Install completion for the current shell. --show-completion : Show completion for the current shell, to copy it or customize the installation. --help : Show this message and exit. Commands : add : Add file(s) to your github remote config : Display and edit your current configuration connect : Checks if you can connect to github create : Creates and connects to a new private repository download : Downloads your notes from a remote edit : Edit a file get : Download a file from your remote ls : Lists markdown files in your remote. offline : Switch to working in offline mode publish : Publishes files that were saved while offline rm : Removes a file show : Prints your file to the console","title":"qlm --help or qlm"},{"location":"commands/#add","text":"Add file(s) to your github remote from your local repo. Accepts wildcards with glob syntax like '*.md'. If you're offline, qlm records this in your configuration. You can see which files qlm has stored by running qlm config. You can add them all to github later by running qlm publish . You can empty this list of files by running qlm config --empty-offline . Or you can use git yourself to send files to your remote! Usage : $ add [OPTIONS] FILES Arguments : FILES : The path to the file you want to add. Accepts wildcard syntax, i.e. myfolder/*.md [required] Options : -f, --force : Don't prompt before adding files [default: False] --help : Show this message and exit.","title":"add"},{"location":"commands/#config","text":"Display and edit your current configuration Usage : $ config [OPTIONS] Options : -e, --editor TEXT : The command to open the text editor you want to use, i.e. nano or vim -eo, --empty-offline : Empty the list of offline files to add with qlm publish. If you want more granular control of these files, it's probably best to empty them and then manually add them to them github using git on the command line [default: False] -lr, --local-repo TEXT : The absolute path to the local directory you want to keep your files in. -rr, --remote-repo TEXT : The full name of the remote repo you want to use, i.e. username/repo -hk, --hide-key TEXT : Don't print out a specific key in the configuration output -o, --offline TEXT : Set offline to True or False. Defaults to True. [default: True] --help : Show this message and exit.","title":"config"},{"location":"commands/#connect","text":"Checks if you can connect to github and sets your config to online. You must set the environment variable $qlm_token to connect. You must specify the full name of the repo in the format username/repo. If you don't, qlm will attempt to find the repo under your personal account username. Usage : $ connect [OPTIONS] REMOTE Arguments : REMOTE : The name of the remote github repository where your notes are, e.g. my-username/repo-name [required] Options : --help : Show this message and exit.","title":"connect"},{"location":"commands/#create","text":"Creates and connects to a new repository in github under your personal account. The repository is private by default because privacy matters Usage : $ create [OPTIONS] REPO_NAME Arguments : REPO_NAME : The name of the new repo to create [required] Options : -p, --public : Make a public, not private repository [default: False] -f, --force : Don't prompt before creating a new repo [default: False] --help : Show this message and exit.","title":"create"},{"location":"commands/#download","text":"Downloads your notes from a remote to a local repository. Online only command To switch into online mode, run qlm connect. Usage : $ download [OPTIONS] LOCAL Arguments : LOCAL : The absolute path to where you want to keep your notes [required] Options : -r, --remote TEXT : The name of the remote you want to download files from. Defaults to whatever is in your config. --help : Show this message and exit.","title":"download"},{"location":"commands/#edit","text":"Edit a file Uses vim by default. You can change the text editor using qlm config --editor. Usage : $ edit [OPTIONS] FILE Arguments : FILE : The path to the file you want to edit relative to remote or local repo root. [required] Options : --help : Show this message and exit.","title":"edit"},{"location":"commands/#get","text":"Download a file from your remote Usage : $ get [OPTIONS] FILE Arguments : FILE : Path to the remote file you want to download [required] Options : -r, --rename TEXT : Rename the file you want to download -d, --directory TEXT : The local directory to save the file to. If not specified, qlm will download the file to your current working directory. --help : Show this message and exit.","title":"get"},{"location":"commands/#ls","text":"Lists markdown files in your remote. Online only To switch into online mode, run qlm connect. Usage : $ ls [OPTIONS] [DIRECTORY] Arguments : [DIRECTORY] : The directory you want to list the contents of. Defaults to the repo root if omitted. Options : -nm, --non-markdown : Also list files that aren't markdown [default: False] --help : Show this message and exit.","title":"ls"},{"location":"commands/#offline","text":"Switch to working in offline mode with a local directory If you want to add your work to a remote later, use qlm publish. Usage : $ offline [OPTIONS] LOCAL Arguments : LOCAL : The absolute path to the local directory where you want to keep your notes [required] Options : --help : Show this message and exit.","title":"offline"},{"location":"commands/#publish","text":"Publishes files that were saved in offline mode using qlm add Usage : $ publish [OPTIONS] Options : -f, --force : Publish files without prompting for confirmation [default: False] --help : Show this message and exit.","title":"publish"},{"location":"commands/#rm","text":"Removes a file Usage : $ rm [OPTIONS] FILE Arguments : FILE : The file you want to remove [required] Options : -f, --force : Remove the file without prompting for confirmation [default: False] --help : Show this message and exit.","title":"rm"},{"location":"commands/#show","text":"Prints your file to the console. Looks much nicer if you use markdown Usage : $ show [OPTIONS] FILE Arguments : FILE : The path to the file you want see. [required] Options : -nm, --no-markup : Print a file out without rendering markdown. [default: False] --help : Show this message and exit.","title":"show"},{"location":"contributing/","text":"Contributing Contributions are very welcome! How to get started First, please consider starring the repo if you're enjoying using qlm . Then please create an issue to discuss the bug/feature/whatever before making a pull request. Local Development qlm uses poetry . There are quite a few ways to set up a poetry project, but I've found this approach the most reliable for me. Use pyenv to configure the local python version with pyenv local <virtualenv name> . Install poetry with pip install poetry . Then to set up your poetry virtuale environment, run poetry env use $(pyenv which python) . Now to set up the project, run poetry install . Hopefully that all goes smoothly - if it doesn't, please submit an issue on Github. Now, here are some commands you will need for local development: poetry run qlm to run the application locally poetry build to build the Python package and then, in a new folder/virtualenv, run pip install <path to wheel you just built> To run test: poetry run pytest --cov=qlm --cov-report=html tests/ To set up the pre-commit hooks, poetry run pre-commit install I'm not aiming at 100% test coverage in this project since I don't think there's much point testing the Github API integrations or Python builtins that interact with files. However, anything that tests the application's commands should include tests. If you do send in a pull request, please also update the package version in pyproject.toml and qlm/__init__.py .","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are very welcome!","title":"Contributing"},{"location":"contributing/#how-to-get-started","text":"First, please consider starring the repo if you're enjoying using qlm . Then please create an issue to discuss the bug/feature/whatever before making a pull request.","title":"How to get started"},{"location":"contributing/#local-development","text":"qlm uses poetry . There are quite a few ways to set up a poetry project, but I've found this approach the most reliable for me. Use pyenv to configure the local python version with pyenv local <virtualenv name> . Install poetry with pip install poetry . Then to set up your poetry virtuale environment, run poetry env use $(pyenv which python) . Now to set up the project, run poetry install . Hopefully that all goes smoothly - if it doesn't, please submit an issue on Github. Now, here are some commands you will need for local development: poetry run qlm to run the application locally poetry build to build the Python package and then, in a new folder/virtualenv, run pip install <path to wheel you just built> To run test: poetry run pytest --cov=qlm --cov-report=html tests/ To set up the pre-commit hooks, poetry run pre-commit install I'm not aiming at 100% test coverage in this project since I don't think there's much point testing the Github API integrations or Python builtins that interact with files. However, anything that tests the application's commands should include tests. If you do send in a pull request, please also update the package version in pyproject.toml and qlm/__init__.py .","title":"Local Development"},{"location":"introduction/","text":"How does it work? qlm is a lightweight python library that makes it easy to take beautiful notes on the command line. It uses Rich's markdown rendering to make stuff look good in your terminal and uses the Typer library for building command line apps in Python. qlm also uses Github as a backend, so you can access your notes on any machine - you just need your Github Personal Access Token . Your notes will be private by default and you can edit them easily - they're just files in a Github repository. qlm provides a few commands to interact with the Github API directly, which makes it fast and simple to set things up. Why qlm ? If you're anything like me, you often have to switch between different machines for work. Work laptop, dev laptop, personal laptop, shell on server x, shell on container y, debug session in k8s pod z . And when you're in these situations, you want your notes! On the command line, and fast. So that's what qlm does. I've found one other project like it - Dnote - which has some very cool features. Check it out! But it requires you to set up a SQL server or pay to use one, which is too much overhead for me. And it doesn't have pretty markdown rendering. Installation pip install qlm Successfully installed qlm qlm --help Set Up To start taking notes, you should first connect to the github repository where you want to keep them in the format <username/repo> . Then, you can create, save and display notes in your terminal export qlm_token='your Github PAT token' qlm connect 'osintalex/notes' qlm config --local-repo 'folder to keep notes in' echo '# Example' > example.md qlm add example.md qlm ls qlm show example.md qlm edit example.md Offline Mode qlm supports working offline. You can keep all your notes in a local folder, and then when you connect back online, run qlm publish to add them to your remote. qlm offline 'folder_with_notes' echo '# Example' > folder_with_notes/example.md qlm add example.md qlm connect 'username/repo' qlm publish","title":"Introduction"},{"location":"introduction/#how-does-it-work","text":"qlm is a lightweight python library that makes it easy to take beautiful notes on the command line. It uses Rich's markdown rendering to make stuff look good in your terminal and uses the Typer library for building command line apps in Python. qlm also uses Github as a backend, so you can access your notes on any machine - you just need your Github Personal Access Token . Your notes will be private by default and you can edit them easily - they're just files in a Github repository. qlm provides a few commands to interact with the Github API directly, which makes it fast and simple to set things up.","title":"How does it work?"},{"location":"introduction/#why-qlm","text":"If you're anything like me, you often have to switch between different machines for work. Work laptop, dev laptop, personal laptop, shell on server x, shell on container y, debug session in k8s pod z . And when you're in these situations, you want your notes! On the command line, and fast. So that's what qlm does. I've found one other project like it - Dnote - which has some very cool features. Check it out! But it requires you to set up a SQL server or pay to use one, which is too much overhead for me. And it doesn't have pretty markdown rendering.","title":"Why qlm?"},{"location":"introduction/#installation","text":"pip install qlm Successfully installed qlm qlm --help","title":"Installation"},{"location":"introduction/#set-up","text":"To start taking notes, you should first connect to the github repository where you want to keep them in the format <username/repo> . Then, you can create, save and display notes in your terminal export qlm_token='your Github PAT token' qlm connect 'osintalex/notes' qlm config --local-repo 'folder to keep notes in' echo '# Example' > example.md qlm add example.md qlm ls qlm show example.md qlm edit example.md","title":"Set Up"},{"location":"introduction/#offline-mode","text":"qlm supports working offline. You can keep all your notes in a local folder, and then when you connect back online, run qlm publish to add them to your remote. qlm offline 'folder_with_notes' echo '# Example' > folder_with_notes/example.md qlm add example.md qlm connect 'username/repo' qlm publish","title":"Offline Mode"}]}